generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             String        @id @default(cuid())
  username       String        @unique
  email          String        @unique
  createdAt      DateTime      @default(now()) @map(name: "created_at")
  updatedAt      DateTime      @updatedAt @map(name: "updated_at")
  Prediction     Prediction[]
  TagAssociation TagToUser[]
  Question       Question[]
  TagProposal    TagProposal[]

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Question {
  id            String          @id @default(cuid())
  description   String
  createdBy     String          @map(name: "created_by")
  status        String
  Prediction    Prediction[]
  TagToQuestion TagToQuestion[]
  creator       User            @relation(fields: [createdBy], references: [id])
  TagProposal   TagProposal[]

  @@map("question")
}

model Prediction {
  id          String   @id @default(cuid())
  madeBy      String?  @map(name: "made_by")
  questionId  String   @map(name: "question_id")
  probability Float
  timestamp   DateTime @default(now())
  question    Question @relation(fields: [questionId], references: [id])
  predictor   User?    @relation(fields: [madeBy], references: [id])

  @@map("prediction")
}

model Tag {
  id            String          @id @default(cuid())
  name          String          @unique
  description   String?
  TagToQuestion TagToQuestion[]
  TagToUser     TagToUser[]
  TagProposal   TagProposal[]

  @@map("tag")
}

model TagProposal {
  id         String   @id @default(cuid())
  proposedBy String   @map(name: "proposed_by")
  questionId String   @map(name: "question_id")
  tagId      String   @map(name: "tag_id")
  status     String
  tag        Tag      @relation(fields: [tagId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  proposer   User     @relation(fields: [proposedBy], references: [id])

  @@map("tag_proposal")
}

model TagToQuestion {
  tagId      String
  questionId String
  tag        Tag      @relation(fields: [tagId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  @@id([tagId, questionId])
  @@map("tag_to_question")
}

model TagToUser {
  tagId  String
  userId String
  tag    Tag    @relation(fields: [tagId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([tagId, userId])
  @@map("tag_to_user")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
